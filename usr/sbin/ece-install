#! /usr/bin/env bash

# The goal of this script, is to have an ECE up and running within
# five minutes. The setup the user is getting is suitable for a
# production environment, except for the fact that with this script,
# all ECE components are set up on the same host.

# by tkj@vizrt.com

#####################################################################
# User definable variables (the defaults are fine in most cases).
#####################################################################
ece_user=escenic
ece_group=escenic
jdbc_driver=/usr/share/java/mysql.jar
debug=0

# don't touch this one if you're installing on a Debian based system
# as it'll be set up for you by the script itself.
java_home=/usr/lib/jvm/java-6-sun
#####################################################################

id="[$(basename $0)]"
pid_file=/var/run/$(basename $0).pid
download_dir=/tmp/ece-downloads
log=/var/log/$(basename $0).log
conf_file=$HOME/.ece-install.conf
common_nursery_dir=/etc/escenic/engine/common

# globals will be set to correct values in run-time.
appserver_port=8080
on_debian_or_derivative=0
on_debian=0

# because the all in one profile will run database, search and app
# server profiles, all of which needs downloading and setting up the
# ECE software components.
ece_software_setup_completed=0

NEW_LINE="
"
# the next steps printed when the user has installed his/her
# components.
next_steps=""

function debug()
{
    if [ $debug -eq 1 ]; then
        echo "[$(basename $0)-debug]" "$@"
    fi
}

function print()
{
    echo $id $@
}

function exit_on_error()
{
    if [ $? -eq 1 ]; then
        echo $id $@ "FAILED, exiting :-("
        exit 1
    fi
}

technet_download_list="
http://technet.escenic.com/downloads/assemblytool-2.0.2.zip
http://technet.escenic.com/downloads/release/53/analysis-engine-2.3.6.0.zip
http://technet.escenic.com/downloads/release/53/community-engine-3.6.1.0.zip
http://technet.escenic.com/downloads/release/53/dashboard-1.0.0.0.zip
http://technet.escenic.com/downloads/release/53/engine-5.3.2.2.zip
http://technet.escenic.com/downloads/release/53/forum-3.0.0.0.zip
http://technet.escenic.com/downloads/release/53/inpage-1.3.0.0.zip
http://technet.escenic.com/downloads/release/53/lucy-dist-4.1.6.0.zip
http://technet.escenic.com/downloads/release/53/menu-editor-dist-2.0.6.0.zip
http://technet.escenic.com/downloads/release/53/poll-2.1.3.0.zip
http://technet.escenic.com/downloads/release/53/xml-editor-dist-2.1.0.0.zip
"

wf_download_list="
http://technet.escenic.com/downloads/widget-framework/widget-framework-core-1.10.0.0.zip
"
tomcat_download=http://ftp.nsysu.edu.tw/Apache/tomcat/tomcat-6/v6.0.32/bin/apache-tomcat-6.0.32.tar.gz

PROFILE_ALL_IN_ONE=1
PROFILE_CACHE_SERVER=5
PROFILE_DB_SERVER=4
PROFILE_EDITORIAL_SERVER=2
PROFILE_PRESENTATION_SERVER=3
PROFILE_RMI_HUB=6
PROFILE_SEARCH_SERVER=7
PROFILE_WIDGET_FRAMEWORK=8
PROFILE_CREATE_PUBLICATION=9

# Because of issue VF-3559, we also create the default family and host
# directories.
dir_list="
$common_nursery_dir
/etc/escenic/engine/family/default
/etc/escenic/engine/host/localhost
/opt/escenic
/var/cache/escenic
/var/crash/escenic
/var/lib/escenic
/var/log/escenic
/var/run/escenic
/var/spool/escenic/migration
"

function make_dir()
{
    if [ ! -d $1 ]; then
        mkdir -p $1
    fi
}

for el in $dir_list; do
    make_dir $el
done

function make_ln()
{
    if [ -e $1 -a ! -h $(basename $1) ]; then
        ln -s $1
    elif [ ! -e $1 ]; then
        print "Tried to make a symlink to $1, but it doesn't exist"
        exit 1
    fi
}

# TODO download documentation to
# /usr/share/doc/escenic/content-engine-<version>/

function download_escenic_components()
{
    if [ $ece_software_setup_completed -eq 1 ]; then
        return
    fi
    
    print "Downloading Escenic software from technet.escenic.com ..."
    
    cd $download_dir
    for el in $technet_download_list; do
        if [ -e $(basename $el) ]; then
            continue
        fi
        
        wget --continue \
            --http-user $technet_user \
            --http-password $technet_password \
            $el \
            1>>$log 2>>$log
    done

}

# will intall the passed packages if these are not installed from
# before.
#
# parameters:
# $1 : space separated string of package names 
install_packages_if_missing()
{
    if [ $on_debian_or_derivative ]; then
        some_are_missing=0
        for el in $@; do
            # we don't need to grep away "No packages found matching
            # ..." since this message from dpkg is written to standard
            # error.
            if [ $(dpkg -l $el 2>/dev/null | grep ^ii | wc -l) -lt 1 ]; then
                some_are_missing=1
            fi
        done
        
        if [ $some_are_missing -eq 0 ]; then
            return
        fi
        
        apt-get install -y $@ 1>>$log 2>>$log
    fi
}


function install_common_os_packages()
{
    print "Installing 3rd party packages needed by $(basename $0) ..."

    if [ $on_debian_or_derivative -eq 1 ]; then
        # Ubuntu doesn't have git (!) but only git-core.
        if [ $on_ubuntu -eq 1 ]; then
            git_package=git-core
        else
            git_package=git
        fi

        packages="curl $git_package wget unzip"
        install_packages_if_missing $packages
    fi

    assert_pre_prequesite curl
    assert_pre_prequesite wget
    assert_pre_prequesite git
    assert_pre_prequesite unzip
}

make_dir $ece_directories

function set_up_assembly_tool()
{
    print "Setting up the Assembly Tool ..."
    
    make_dir /opt/escenic/assemblytool/
    cd /opt/escenic/assemblytool/
    
    if [ -e $download_dir/assemblytool*zip ]; then
        unzip -u $download_dir/assemblytool*zip \
            1>>$log 2>>$log
    fi

    # adding an instance layer to the Nursery configuration
    cp -r /opt/escenic/engine/siteconfig/bootstrap-skeleton \
        /opt/escenic/assemblytool/conf
    cd /opt/escenic/assemblytool/conf/
    cp -r layers/host layers/instance
    cat > layers/instance/Files.properties <<EOF
\$class=neo.nursery.FileSystemDepot
fileSystemRoot = /etc/escenic/engine/instance/\${com.escenic.instance}/
EOF
    echo "" >> Nursery.properties
    echo "layer.06 = /layers/instance/Layer" >> Nursery.properties
    
    # set up which plugins to use
    cd /opt/escenic/assemblytool/
    make_dir plugins
    cd plugins
    find ../../ -maxdepth 1 -type d | \
        grep -v assemblytool | \
        while read directory; do
        if [ $directory = "../../" -o \
            $(echo $directory | grep widget-framework | wc -l) -gt 0 ]; then
            continue
        fi
        
          # nuisance to get the community engine, but not the engine
        if [ $(echo $directory | grep engine | wc -l) -gt 0 ]; then
            if [ $(echo $directory | grep community | wc -l) -lt 1 ]; then
                continue
            fi
        fi
        
        make_ln $directory
    done

    cd /opt/escenic/assemblytool/
    ant -q initialize \
        1>>$log 2>>$log
    # TODO if assemblytool fails, abort?

    cat assemble.properties | \
        sed 's/#\ engine.root\ =\ \./engine.root=\/opt\/escenic\/engine/g' \
        > assemble.properties.tmp
    mv assemble.properties.tmp assemble.properties

    cat assemble.properties | \
        sed 's/\#\# plugins\ =\ \/path\/to\/plugins/plugins=\/opt\/escenic\/assemblytool\/plugins/g' \
        > assemble.properties.tmp
    mv assemble.properties.tmp assemble.properties
}

function set_up_engine_and_plugins()
{
    if [ $ece_software_setup_completed -eq 1 ]; then
        return
    fi
    
    print "Setting up the Escenic Content Engine & its plugins ..."

    make_dir /opt/escenic
    cd /opt/escenic/

    if [ ! -d engine-* ]; then
        unzip -u $download_dir/engine*.zip \
            1>>$log 2>>$log
        if [ ! -d engine-* ] ; then
            echo "After unpacking " $download_dir/engine*.zip " no engine directory appeared."
            # TODO is it possible to recover?
            exit 2
        fi
        if [ -h engine ]; then
            rm engine
        fi
    
        ln -s engine-* engine
    else
        debug "engine-<version> is already there, skipping to next step."
    fi
    
    # we extract them in /opt/escenic as we want to re-use
    # them between minor updates of ECE.
    cd /opt/escenic/
    for el in $download_dir/*.zip; do
        if [ "${el/engine*}" == "" ] ; then
          continue
        fi
        if [ "${el/assemblytool*}" == "" ] ; then
          continue
        fi
        unzip -u $el \
            1>>$log 2>>$log
    done

    ece_software_setup_completed=1
}

function set_up_ece_scripts()
{
    print "Setting up the ece UNIX scripts ..." 

    cd $download_dir
    if [ -d ece-scripts ]; then
        (cd ece-scripts
            git pull 1>>$log 2>>$log)
    else
        git clone $git_source \
            1>>$log 2>>$log
    fi
    
    cp -r ece-scripts/usr/* /usr/
    cp -r ece-scripts/etc/* /etc/

    # no need to add init.d scripts to the runlevel(s) for these
    # profiles
    if [ $install_profile_number -eq $PROFILE_WIDGET_FRAMEWORK -o \
         $install_profile_number -eq $PROFILE_SEARCH_SERVER -o \
         $install_profile_number -eq $PROFILE_DB_SERVER -o \
         $install_profile_number -eq $PROFILE_CACHE_SERVER ]; then
        return
    fi

    if [ $on_debian_or_derivative ]; then
        print "Adding the ece init.d script to the default run levels..."
        update-rc.d ece defaults \
            1>>$log 2>>$log
    else
        print "You remember to add /etc/intit.d/ece to the desired runlevels" 
        # TODO add init.d to the default runlevels, for other
        # distributions too:
        # - RedHat/chekcconfig
        # - Gentoo: rc-update add ece default
    fi
}

function set_up_ecedb()
{
    print "Setting up the ECE database schema ..."

    make_dir /opt/escenic/engine/plugins
    cd /opt/escenic/engine/plugins
    
    find ../../ -maxdepth 1 -type d | \
        grep -v assemblytool | \
        while read directory; do
        if [ $directory = "../../" ]; then
            continue
        fi
        
          # nuisance to get the community engine, but not the engine
        if [ $(echo $directory | grep engine | wc -l) -gt 0 ]; then
            if [ $(echo $directory | grep community | wc -l) -lt 1 ]; then
                continue
            fi
        fi

        if [ ! -h $(basename $directory) ]; then
            ln -s $directory
        fi
    done

    source /usr/sbin/drop-and-create-ecedb
    # TODO in future, it'll be possible to override db_user,
    # db_password and db_schema here by reading these via
    # get_conf_value
    create_ecedb
    exit_on_error "create_ecedb"
    
    cd ~/
    rm -rf /opt/escenic/engine/plugins

    add_next_step "- DB is now set up on $HOSTNAME:3306"
}

# returns a string of asterixes with the same lenght as the inputted
# string.
function get_asterixes()
{
    s=""
    j=$(echo $1 | wc -c)

    # wc -c always returns the length + 1, hence we start on index=1
    for (( i=1; i<$j; i++ )); do
        s=${s}"-"
    done
    echo "$s"
}

function set_up_basic_nursery_configuration()
{
    print "Setting up the basic Nursery configuration ..."
    
    cp -r /opt/escenic/engine/siteconfig/config-skeleton/* \
        $common_nursery_dir/
    cp -r /opt/escenic/engine/security/ \
        $common_nursery_dir/

    make_dir /etc/escenic/engine/instance

    for el in /opt/escenic/assemblytool/plugins/*; do
        if [ ! -d $el/misc/siteconfig/ ]; then
            continue
        fi

        cp -r $el/misc/siteconfig/* $common_nursery_dir/
        
    done

    cat > $common_nursery_dir/ServerConfig.properties <<EOF
databaseProductName=MySQL
filePublicationRoot=/var/lib/escenic/engine/
webPublicationRoot=http://$HOSTNAME:${appserver_port}/
EOF
    cat > $common_nursery_dir/neo/io/managers/ContentManager.properties <<EOF
readConnector=/connector/ReadConnector
updateConnector=/connector/UpdateConnector
EOF

    file=$common_nursery_dir/com/escenic/community/CommunityEngine.properties
    cat $file | \
        sed 's/jdbc\/ecome/jdbc\/ECE_UPDATE_DS/g' \
        > $file.tmp
    mv $file.tmp $file

    file=$common_nursery_dir/com/escenic/webstart/StudioConfig.properties
    cat >> $file <<EOF

# We set this to get around a missing feature in Varnish, see:
# https://www.varnish-cache.org/trac/wiki/Future_Feature#Chunkedencodingclientrequests
# For Escenic-ites, see: VF-3480
property.com.escenic.client.chunked=false
EOF
}

function set_up_instance_specific_nursery_configuration()
{
    for el in /etc/escenic/engine/instance/*; do
       i=$(( i + 1 ))
       if [ $(basename $el) = $instance_name ]; then
           rmi_port="8${i}23"
           echo "port=$rmi_port" > $el/RMI.properties
       fi
    done

    nursery_context=neo/io/managers/HubConnectionManager.properties
    file=/etc/escenic/engine/instance/$instance_name/$nursery_context
    make_dir $(dirname $file)
    
    # we don't touch it if the file already exists.
    if [ ! -e $file ]; then
        echo "hostname=$HOSTNAME" >> $file
    fi
    
}

function set_up_proper_logging_configuration()
{
    print "Setting up proper log4j & Java logging configuration ..."
    
    cat > $common_nursery_dir/trace.properties <<EOF
log4j.rootLogger=ERROR, ECELOG
log4j.appender.ECELOG=org.apache.log4j.DailyRollingFileAppender
log4j.appender.ECELOG.File=/var/log/escenic/\${escenic.server}-messages
log4j.appender.ECELOG.layout=org.apache.log4j.PatternLayout
log4j.appender.ECELOG.layout.ConversionPattern=%d %5p [%t] %x (%c) %m%n
EOF
    cd $tomcat_base/lib/
    make_ln $common_nursery_dir/trace.properties
    ln -sf trace.properties log4j.properies

    cat > $tomcat_base/conf/logging.properties <<EOF
handlers = 1catalina.org.apache.juli.FileHandler, 2localhost.org.apache.juli.FileHandler, java.util.logging.ConsoleHandler, 6localhost.org.apache.juli.FileHandler

.handlers = 1catalina.org.apache.juli.FileHandler, java.util.logging.ConsoleHandler

1catalina.org.apache.juli.FileHandler.level = FINE
1catalina.org.apache.juli.FileHandler.directory = \$\{catalina.base\}/logs
1catalina.org.apache.juli.FileHandler.prefix = catalina.

2localhost.org.apache.juli.FileHandler.level = FINE
2localhost.org.apache.juli.FileHandler.directory = \$\{catalina.base\}/logs
2localhost.org.apache.juli.FileHandler.prefix = localhost.

java.util.logging.ConsoleHandler.level = FINE
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

6localhost.org.apache.juli.FileHandler.level = FINE
6localhost.org.apache.juli.FileHandler.directory = /var/log/escenic
6localhost.org.apache.juli.FileHandler.prefix = solr.

org.apache.solr.level=INFO
org.apache.solr.handlers=6localhost.org.apache.juli.FileHandler

org.apache.catalina.core.ContainerBase.[Catalina].[localhost].level = INFO
org.apache.catalina.core.ContainerBase.[Catalina].[localhost].handlers = 2localhost.org.apache.juli.FileHandler

EOF
}

# Parameters:
# $1 is the property
# $2 is the value
# $3 is the file
function set_conf_file_value()
{
    if [ -r $3 ]; then
        if [ $(grep $1 $3 | wc -l) -gt 0 ]; then
            # TODO update existing values of the property instead of
            # removing & appending it.
            cat $3 | grep -v ^$1 > $3.tmp
            mv $3.tmp $3
        fi
    fi
    
    echo "$1=$2" >> $3
}

# The function accepts the following parameters:
# $1 is the property
# $2 is the value
#
# The function will set these for the current instance's ece.conf. If
# the value already is set, it will replace it with this one.
function set_ece_instance_conf()
{
    instance_conf_file=/etc/escenic/ece-$instance_name.conf
    set_conf_file_value $1 $2 $instance_conf_file
}

# Installs third party packages needed by the ECE (i.e. Java related).
# Also see install_common_os_packages for packages common to all
# servers in the architecture.
function install_ece_third_party_packages
{
    print "Installing 3rd party packages needed by ECE ..."
    
    if [ $on_debian_or_derivative -eq 1 ]; then

        if [ $on_ubuntu -eq 1 ]; then
            add_apt_source "deb http://archive.canonical.com/ $(lsb_release -s -c) partner"              
        fi
        
        echo "sun-java6-jdk shared/accepted-sun-dlj-v1-1 boolean true" | \
            debconf-set-selections

        packages="
          ant
          ant-contrib
          ant-optional
          libapr1
          libtcnative-1
          libmysql-java
          memcached
          maven2
          sun-java6-jdk
          wget"

        install_packages_if_missing $packages
    fi
    
    for el in ant mvn java; do
        assert_pre_prequesite $el
    done
}

function set_up_app_server
{
    print "Setting up the application server ..."

    if [ $fai_enabled -eq 0 ]; then
        print "On which ports do you wish to run the app server on?"
        print "Press ENTER to accept the default (port 8080, shutdown port 8005)"
        print "Or enter: <port> <shutdown port>, e.g.: '8180 8105'"
        echo -n "Your choice [8080 8005]> "
        read user_ports
        
        if [ -z "$user_ports" ]; then
            appserver_port=$(echo $user_ports | cut -d' ' -f1)
            shutdown_port=$(echo $user_ports | cut -d' ' -f2)
        fi
    else
        if [ $install_profile_number -eq $PROFILE_EDITORIAL_SERVER ]; then
            appserver_port=$(get_conf_value fai_editor_port)
            shutdown_port=$(get_conf_value fai_editor_shutdown)
        elif [ $install_profile_number -eq $PROFILE_PRESENTATION_SERVER ]; then
            appserver_port=$(get_conf_value fai_presentation_port)
            shutdown_port=$(get_conf_value fai_presentation_shutdown)
        elif [ $install_profile_number -eq $PROFILE_SEARCH_SERVER ]; then
            appserver_port=$(get_conf_value fai_search_port)
            shutdown_port=$(get_conf_value fai_search_shutdown)
        fi
    fi

    if [ -z "$appserver_port" ]; then
        appserver_port=8080
    elif [ -z "$appserver_shutdown" ]; then
        appserver_shutdown=8005
    fi
    
    debug "appserver_port=$appserver_port shutdown_port=$shutdown_port"
    
    if [ $fai_enabled -eq 0 ]; then
        print "Another question: Where does the database run?"
        print "Press ENTER to accept the default ($HOSTNAME:3306)"
        print "Or enter: <host>:<port>, e.g.: 'db1:3306'"
        echo -n "Your choice [$HOSTNAME:3306]> "
        read user_database
    else
        user_database=$(get_conf_value fai_db_host)
        if [ -n "${user_database}" ]; then
            user_database=$user_database":"$(get_conf_value fai_db_port)
        fi
    fi

    if [ -z "$user_database" ]; then
        db_host=$HOSTNAME
        db_port=3306
    else
        db_host=$(echo $user_database | cut -d':' -f1)
        db_port=$(echo $user_database | cut -d':' -f2)
    fi

    if [ $fai_enabled -eq 0 ]; then
        print "Last question: Where does the search instance run?"
        print "Press ENTER to accept the default ($HOSTNAME:8080)"
        print "If you're in doubt, just press ENTER :-)"
        print "Or enter: <host>:<port>, e.g.: 'search1:8080'"
        echo -n "Your choice [$HOSTNAME:8080]> "
        read user_search
    else
        user_search=$(get_conf_value fai_search_host)
        if [ -n "${user_search}" ]; then
            user_search=${user_search}":"$(get_conf_value fai_search_port)
        fi
    fi

    if [ -z "$user_search" ]; then
        search_host=$HOSTNAME
        search_port=8080
    else
        search_host=$(echo $user_search | cut -d':' -f1)
        search_port=$(echo $user_search | cut -d':' -f2)
    fi
    
    cd $download_dir
    wget --continue $tomcat_download \
        1>>$log 2>>$log
    
    cd /opt/
    
    tar xzf $download_dir/apache-tomcat*.tar.gz
    ln -sf apache-tomcat* tomcat
    
    tomcat_base=/opt/tomcat-${instance_name}
    make_dir $tomcat_base

    cp -r /opt/apache-tomcat*/conf/ $tomcat_base
    for el in bin escenic/lib lib work logs temp webapps; do
        make_dir $tomcat_base/$el
    done

    set_ece_instance_conf tomcat_base $tomcat_base   
    set_ece_instance_conf tomcat_home /opt/tomcat   
   
    cd $tomcat_base/lib
    make_ln $jdbc_driver

    cat $tomcat_base/conf/catalina.properties | \
        sed 's/common.loader=/common.loader=\$\{catalina.base\}\/escenic\/lib\/\*\.jar\,/g' \
        > $tomcat_base/conf/catalina.properties.tmp
    mv $tomcat_base/conf/catalina.properties.tmp $tomcat_base/conf/catalina.properties
    
    cat > $tomcat_base/conf/server.xml <<EOF
<?xml version='1.0' encoding='utf-8'?>
<Server port="$shutdown_port" shutdown="SHUTDOWN">
  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
  <Listener className="org.apache.catalina.core.JasperListener" />
  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
  <Listener className="org.apache.catalina.mbeans.ServerLifecycleListener" />
  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />

  <GlobalNamingResources>
    <Resource name="UserDatabase"
              auth="Container"
              type="org.apache.catalina.UserDatabase"
              description="User database that can be updated and saved"
              factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
              pathname="conf/tomcat-users.xml" />
    <Resource
        name="jdbc/ECE_READ_DS"
        auth="Container"
        type="javax.sql.DataSource"
        maxActive="400"
        maxIdle="8"
        maxWait="2000"
        initialSize="20"
        username="ece5user"
        password="ece5password"
        driverClassName="com.mysql.jdbc.Driver"

url="jdbc:mysql://localhost:3306/ece5db?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;characterSetResults=UTF-8"
        removeAbandoned="true"
        removeAbandonedTimeout="120"
        logAbandoned="true"
        testOnBorrow="false"
        testOnReturn="false"
        timeBetweenEvictionRunsMillis="60000"
        numTestsPerEvictionRun="5"
        minEvictableIdleTimeMillis="30000"
        testWhileIdle="true"
        validationQuery="select now()"
        />
    <Resource
        name="jdbc/ECE_UPDATE_DS"
        auth="Container"
        type="javax.sql.DataSource"
        maxActive="100"
        maxIdle="8"
        maxWait="2000"
        initialSize="20"
        username="ece5user"
        password="ece5password"
        driverClassName="com.mysql.jdbc.Driver"
        url="jdbc:mysql://localhost:3306/ece5db?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;characterSetResults=UTF-8"
        removeAbandoned="true"
        removeAbandonedTimeout="120"
        logAbandoned="true"
        testOnBorrow="false"
        testOnReturn="false"
        timeBetweenEvictionRunsMillis="60000"
        numTestsPerEvictionRun="5"
        minEvictableIdleTimeMillis="30000"
        testWhileIdle="true"
        validationQuery="select now()"
        />
  </GlobalNamingResources>

  <Service name="Catalina">
    <Connector port="${appserver_port}"
               protocol="HTTP/1.1" 
               connectionTimeout="20000" 
               URIEncoding="UTF-8"
               compression="on"
               redirectPort="8543" />
    <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
      <Valve className="org.apache.catalina.valves.AccessLogValve"
             prefix="access."
             suffix=".log"
             pattern="common"/>
      <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
             resourceName="UserDatabase"/>
      <Host name="localhost"
            appBase="webapps"
            unpackWARs="true"
            autoDeploy="true"
            xmlValidation="false"
            xmlNamespaceAware="false">
      </Host>
    </Engine>
  </Service>
</Server>

EOF
    cat > $tomcat_base/conf/context.xml <<EOF
<?xml version='1.0' encoding='utf-8'?>
<Context>

  <WatchedResource>WEB-INF/web.xml</WatchedResource>

  <ResourceLink
      global="jdbc/ECE_READ_DS"
      name="jdbc/ECE_READ_DS"
      type="javax.sql.DataSource"/>
  
  <ResourceLink
      global="jdbc/ECE_UPDATE_DS"
      name="jdbc/ECE_UPDATE_DS"
      type="javax.sql.DataSource"/>
  
  <Environment
      name="escenic/indexer-webservice"
      value="http://localhost:${appserver_port}/indexer-webservice/index/"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/index-update-uri"
      value="http://${search_host}:${search_port}/solr/update/"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/solr-base-uri"
      value="http://${search_host}:${search_port}/solr/"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/head-tail-storage-file"
      value="/var/lib/escenic/engine/head-tail.index"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/failing-documents-storage-file"
      value="/var/lib/escenic/engine/failures.index"
      type="java.lang.String"
      override="false"/>

</Context>
EOF

}

# last, give the control back to the ECE user & group 
function set_correct_permissions()
{
    print "Setting correct permissions on all ECE related directories ..."

    if [ $(grep $ece_user /etc/passwd | wc -l) -lt 1 ]; then
        # TODO add support for useradd
        adduser $ece_user
    fi
    if [ $(grep $ece_group /etc/group | wc -l) -lt 1 ]; then
        addgroup $ece_group
    fi

    for el in $dir_list; do
        if [ -d $el ]; then
            chown -R ${ece_user}:${ece_group} $el \
                1>>$log 2>>$log                
        fi
    done
    
    if [ -d "$tomcat_base" ]; then
        chown -R ${ece_user}:${ece_group} $tomcat_base \
        1>>$log 2>>$log
    fi

    if [ $(ls /tmp | grep ^ece | wc -l) -gt 0 ]; then
        chown -R ${ece_user}:${ece_group} /tmp/ece-* \
            1>>$log 2>>$log
    fi
}


function print_status_and_next_steps()
{
    # su - $ece_user -c "ece versions" 1>>$log 2>>$log

    now=`date +%s`
    started=`stat -c %Y $pid_file`
    seconds=$(( now - started ))
    days=$(( seconds / ( 60 * 60 * 24 ) ))
    seconds_left=$(( seconds - ( $days * 60 * 60 * 24 ) ))
    hours=$(( seconds_left / ( 60 * 60 ) ))
    seconds_left=$(( seconds_left - ( $hours * 60 * 60 ) ))
    minutes=$(( seconds_left / 60 ))
    seconds_left=$(( seconds_left - $minutes * 60 ))

    print "The installation is now complete!"
    print "- It took" ${days}d ${hours}h ${minutes}m ${seconds_left}s
    echo "$next_steps"

    print ""
    print "Enjoy your time with Escenic Content Engine!"
    print ""
    print "-Vizrt Online"
}

# Based on Erik Mogensen's work:
# //depot/branches/personal/mogsie/fromscratch/create-publication.sh
function create_publication_in_db()
{
    print "Creating publication ${publication_name} using $instance_name ..."

    ece_admin_uri=http://$HOSTNAME:${appserver_port}/escenic-admin
    
    cookie=$(HEAD $ece_admin_uri | \
        grep -i "^Set-Cookie" | \
        sed s/.*'JSESSIONID=\([^;]*\).*'/'\1'/)

    if [ "$cookie" == "" ] ; then
        print "Unable to get a session cookie."
        exit 1;
    fi

    curl --silent \
        -F "type=webapp" \
        -F "resourceFile=@${1}" \
        --cookie JSESSIONID="$cookie" \
        "${ece_admin_uri}/do/publication/resource" \
        1>>$log 2>>$log
    
    curl --silent  \
        -F "name=${publication_name}" \
        -F "publisherName=Escenic" \
        -F "adminPassword=${publication_name}" \
        -F "adminPasswordConfirm=${publication_name}" \
        --cookie JSESSIONID="$cookie" \
        "${ece_admin_uri}/do/publication/insert" \
        1>>$log 2>>$log
}

function create_publication_definition_and_war()
{
    publication_name=mypub

    if [ $fai_enabled -eq 0 ]; then
        print "What name do you wish to give your publication?"
        print "Press ENTER to accept ${publication_name}"
        echo -n "Your choice [${publication_name}]> "
        read publication_name
    else
        publication_name=$(get_conf_value fai_publication_name)
    fi

    if [ -z "$publication_name" ]; then
        publication_name=mypub
    fi

    print "Setting up the ${publication_name} publication ..."
    make_dir /opt/escenic/assemblytool/publications/
    cd /opt/escenic/assemblytool/publications/
    cat > /opt/escenic/assemblytool/publications/${publication_name}.properties <<EOF
name: ${publication_name}
source-war: ${publication_name}.war
context-root: ${publication_name}
EOF

    publication_war=/opt/escenic/assemblytool/publications/${publication_name}.war
    if [ -d /opt/escenic/widget-framework-core-* ]; then
        print "Basing ${publication_name}.war on the Widget Framework Demo ..."
        cd /opt/escenic/widget-framework-core-*/publications/demo-core
        mvn package \
            1>>$log 2>>$log
        cp target/demo-core-*.war ${publication_war}
    else
        print "Basing your ${publication_name}.war on ECE/demo-clean ..."
        cp /opt/escenic/engine/contrib/wars/demo-clean.war ${publication_war}
    fi
    
}

function check_for_required_downloads()
{
    if [ $ece_software_setup_completed -eq 1 ]; then
        return
    fi
    
    print "Asserting that required downloads succeeded ..."
    required_escenic_packages="engine assemblytool"

    for el in $required_escenic_packages; do
        if [ $(ls $download_dir | \
            grep ${el} | \
            grep -v community | \
            grep -v analysis | \
            grep .zip$ | \
            wc -l) \
            -lt 1 ]; then
            print "Couldn't find $el* in $download_dir"
            exit 1
        fi
    done
}

function install_memcached()
{
    if [ $on_debian_or_derivative ]; then
        install_packages_if_missing "memcached"
    fi
    
     # 1) download java library
     # 2) configure PresenationArticle cache for the publication
     # 3) build and re-deploy
    
    cat >> /etc/escenic/engine/common/Initial.properties <<EOF

# using memcached
service.0.0-memcached-socket-pool=/com/danga/SockIOPool
EOF

    echo "TBD"
}

function set_up_user_enviornment()
{
    print "Setting up the ${ece_user} user's UNIX environment ..."

     # TODO get this from ece.conf and other magic

    if [ $(grep JAVA_HOME /home/$ece_user/.bashrc | wc -l) -lt 1 ]; then
        echo JAVA_HOME=$java_home >> /home/$ece_user/.bashrc
    fi
    if [ $(grep JAVA_HOME /root/.bashrc | wc -l) -lt 1 ]; then
        echo JAVA_HOME=$java_home >> /root/.bashrc
    fi

    if [ $on_debian_or_derivative -eq 1 ]; then
        export JAVA_HOME=$java_home
    fi

    if [ $(grep bash_completion.d/ece /home/$ece_user/.bashrc | wc -l) -lt 1 ]
    then
        echo ". /etc/bash_completion.d/ece" \
            >> /home/$ece_user/.bashrc
    fi
}

function set_up_solr()
{
    print "Setting up solr ..."
    if [ ! -d /etc/escenic/solr ]; then
        cp -r  /opt/escenic/engine/solr/conf /etc/escenic/solr
    fi
    
    make_dir /var/lib/escenic/solr/
    cd /var/lib/escenic/solr/
    if  [ ! -h conf ]; then
        ln -s /etc/escenic/solr conf
    fi
}

# So far, I've used this method for copy/past-ing it into the shell
# before running ece-insatll anew. It might be useful for its own
# command later, though.
function un_install_ece()
{
    print "Uninstalling ECE ..."
     # TODO safety, warnings++
    rm -rf /etc/escenic/ \
        /opt/*tomcat* \
        /opt/escenic \
        /var/lib/escenic \
        /var/run/escenic/ \
        /etc/escenic/ \
        /usr/bin/ece \
        /var/log/escenic/ \
        /etc/apt/sources.list.d/escenic.list \
#        $HOME/.m2 \
        /var/run/ece-install.pid

    apt-get --yes --purge remove \
        varnish \
        percona* \
        maven2 \
        ant \
        ant-contrib \
        ant-optional \
        libmysql-java \
        memcached \
        sun-java6-jdk
    
    apt-get clean
    
     # prepare for new install
    mv /tmp/*.zip /tmp/ece-downloads/
}

function stop_conflicting_processes()
{
    print "Stopping conflicting processes ..."
     # TODO this is dirty
    killall java 1>>$log 2>>$log
}

function set_up_varnish()
{
    print "Setting up Varnish to match your environment ..."
    /etc/init.d/varnish stop 1>>$log 2>>$log

    file=/etc/default/varnish
    sed -i 's/6081/80/g' $file

    cat > /etc/varnish/default.vcl <<EOF
/* Varnish configuration for Escenic Content Engine              -*- java -*- */

/* IPs that are allowed to access the administrative pages/webapps. */
acl staff {
  "localhost";
EOF
    w | cut -d' ' -f7 | sort | uniq | while read l; do
        if [ $(echo $l | wc -c) -gt 8 ]; then
    cat >> /etc/varnish/default.vcl <<EOF
  # The host which conducted the ece-install"
  "${l}";
EOF
        fi
    done
    
    cat >> /etc/varnish/default.vcl <<EOF
}

/* The IP of the Adactus/Mobilize server */
acl adactus {
  "203.33.232.216";
}

EOF

    for el in $backend_servers; do
        appserver_host=$(echo $el | cut -d':' -f1)
        appserver_port=$(echo $el | cut -d':' -f2)

        cat >> /etc/varnish/default.vcl <<EOF
backend $appserver_host {
  .host = "$appserver_host";
  .port = "$appserver_port";
}

EOF
    done

    cat >> /etc/varnish/default.vcl <<EOF
/* The client director gives us session stickiness based on client
 * IP. */
director webdirector client {
EOF
    for el in $backend_servers; do
        appserver_host=$(echo $el | cut -d':' -f1)
        cat >> /etc/varnish/default.vcl <<EOF
  {
     .backend = $appserver_host;
     .weight = 1;
  }
EOF
    done

    cat >> /etc/varnish/default.vcl <<EOF
}
EOF

    cat >> /etc/varnish/default.vcl <<EOF
sub vcl_recv {
  if (!client.ip ~ staff &&
      (req.url ~ "^/escenic" ||
       req.url ~ "^/studio" ||
       req.url ~ "^/webservice" ||
       req.url ~ "^/escenic-admin")) {
     error 405 "Not allowed.";
  }

  /* Only Adactus/Mobilize is allowed to access the /binary context
   * which contains all the full quality video files. */
  if (!client.ip ~ adactus && req.url ~ "^/binary") {
    error 405 "Not allowed.";
  }

  set req.backend = webdirector;

  if (req.url ~ "\.(png|gif|jpg|css|js)$" || req.url == "/favicon.ico") { 
    remove req.http.Cookie;
  }
}

 /* Called when content is fetched from the backend. */
sub vcl_fetch {
  /* Remove cookies from these resource types and cache them for a
   * long time */
  if (req.url ~ "\.(png|gif|jpg|css|js)$" || req.url == "/favicon.ico") { 
    set beresp.ttl = 5h;
    remove beresp.http.Set-Cookie;
  }
}

sub vcl_deliver {
  /* Adds debug header to the result so that we can easily see if a
   * URL has been fetched from cache or not.
   */
  if (obj.hits > 0) {
    set resp.http.X-Cache = "HIT #" + obj.hits;
  }
  else {
    set resp.http.X-Cache = "MISS";
  }

  set resp.http.X-Cache-Backend = req.backend;
}
EOF
    /etc/init.d/varnish start 1>>$log 2>>$log
}

function read_user_input()
{
    echo "Hi, which server profile do you wish to install?"
    echo ""
    echo "Select 1-9 and press ENTER"
    echo ""
    echo "  $PROFILE_ALL_IN_ONE - All in one, the full stack on one host. "
    echo "      Suitable for development and test environments."
    echo "      It will install caching server, ECE, assembly host, database &"
    echo "      Widget Framework as well as set up a new publication."
    echo "  $PROFILE_EDITORIAL_SERVER - Editorial (publication) server."
    echo "      This will install ECE, an assembly host & as well as "
    echo "      creating and set up a new publication."
    echo -n "  $PROFILE_PRESENTATION_SERVER - Presentation server "
    echo "(ECE, memcached)."
    echo "  $PROFILE_DB_SERVER - Database server."
    echo -n "  $PROFILE_CACHE_SERVER - Cache server "
    echo "(cache & web server)."
    echo "  $PROFILE_RMI_HUB - RMI hub."
    echo -n "  $PROFILE_SEARCH_SERVER - Standalone search instance "
    echo "(solr + indexer-webapp)."
    echo "  $PROFILE_WIDGET_FRAMEWORK - Install the Widget Framework."
    echo "      (You need user/pass for repo.escenic.com for this)."
    echo "  $PROFILE_CREATE_PUBLICATION - Create a new publication."
    echo "      This profile will create new publication based on WF"
    echo "      (if available) or ECE/clean-demo."
    echo ""
    echo -n "Your choice [1]> "
    read install_profile_number
    
    if [ -z "$install_profile_number" ]; then
        install_profile_number=$PROFILE_ALL_IN_ONE
    fi
    
}

function assert_correct_runtime_environment()
{
    if [ $(whoami) != "root" ]; then
        print "You must be root when running $(basename $0)"
        exit 1
    fi
    
    if [ -e $pid_file ]; then
        print "There's already one $(basename $0) process running. If you believe"
        print "this is wrong, e.g. if a previous run of $(basename $0) was aborted"
        print "before it completed, you may delete ${pid_file} and "
        print "run $(basename $0) again."
        exit 1
    else
        echo $BASHPID > $pid_file
    fi

    if [ ! -e "$conf_file" ]; then
        print $conf_file "doesn't exist, I cannot live without it :-("
        exit 1
    fi
}

function common_pre_install()
{
    print "I'm logging to $log"

    technet_user=`grep technet_user $conf_file 2>/dev/null | cut -d'=' -f2`
    technet_password=`grep technet_password $conf_file 2>/dev/null | cut -d'=' -f2`
    git_source=`grep git_source $conf_file 2>/dev/null | cut -d '=' -f2`
    # Assign a default value to git_source if not found
    ${git_source:=http://github.com/skybert/ece-scripts.git}

    if [ -z "$technet_user" -o -z "$technet_password" ]; then
        print "Be sure to set technet_user and technet_password "
        print "in $conf_file"
        exit 1
    fi

    if [ -e /etc/debian_version -a -x /usr/bin/dpkg ]; then
        on_debian_or_derivative=1
        export DEBIAN_FRONTEND=noninteractive
    fi

    if [ $(lsb_release -i | grep Ubuntu | wc -l) -gt 0 ]; then
        on_ubuntu=1
    elif [ $(lsb_release -i | grep Debian | wc -l) -gt 0 ]; then
        on_debian=1
    fi

    make_dir $download_dir
    set_correct_permissions
    stop_conflicting_processes
    install_common_os_packages
    set_up_ece_scripts
    set_up_user_enviornment
}

function assert_pre_prequesite()
{
    if [ $(which $1 | wc -l) -lt 1 ]; then
        print "Please install $1 and then run $(basename $0) again."
        exit 1
    fi
}

function add_apt_source()
{
    escenic_sources=/etc/apt/sources.list.d/escenic.list
    if [ ! -e $escenic_sources ]; then
        echo "$@" >> $escenic_sources
        apt-get update 1>>$log 2>>$log
    elif [ $(grep "$@" $escenic_sources | wc -l) -lt 1 ]; then
        echo "$@" >> $escenic_sources
        apt-get update 1>>$log 2>>$log
    fi
}

function install_cache_server()
{
    print "Installing a caching server on $HOSTNAME ..."

    if [ $on_debian_or_derivative -eq 1 ]; then
        curl http://repo.varnish-cache.org/debian/GPG-key.txt 2>>$log | \
            apt-key add - 1>>$log 2>>$log
    fi
    
    if [ $on_debian -eq 1 ]; then
        add_apt_source "deb http://repo.varnish-cache.org/debian/ $(lsb_release -s -c) varnish-3.0"
    elif [ $on_ubuntu -eq 1 ]; then
        add_apt_source "deb http://repo.varnish-cache.org/ubuntu/ $(lsb_release -s -c) varnish-3.0"
    fi

    if [ $on_debian_or_derivative -eq 1 ]; then
        apt-get -y install varnish 1>>$log 2>>$log
    fi

    assert_pre_prequesite varnishd

    if [ $fai_enabled -eq 0 ]; then
        print "You must now list your backend servers."
        print "Seperate the entries with a space. e.g.: app1:8080 app2:8080."
        print "Press ENTER to accept the default: ${HOSTNAME}:${appserver_port}"
        echo -n "Your choice [${HOSTNAME}:${appserver_port}]> "
        read backend_servers
    else
        backend_servers=$(get_conf_value fai_cache_backends)
    fi

    if [ -z "$backend_servers" ]; then
        backend_servers="${HOSTNAME}:${appserver_port}"
    fi

    set_up_varnish $backend_servers

    add_next_step "- Cache server is up and running at http://${HOSTNAME}:80/"
}

# Parameters:
# $1 : your added line
function add_next_step()
{
    if [ -n "$next_steps" ]; then
        next_steps=${next_steps}${NEW_LINE}${id}" "${1}
    else
        next_steps=${id}" "${1}
    fi
}

function install_database_server()
{
    print "Installing the database server on $HOSTNAME ..."

    if [ $on_debian_or_derivative -eq 1 ]; then

        code_name=$(lsb_release -s -c)
        
        supported_code_name=0
        supported_list="lenny squeeze hardy lucid maverick"
        for el in $supported_list; do
            if [ $code_name = $el ]; then
                supported_code_name=1
            fi
        done
        
         # some how, this is to install Percona 5.5
        if [ -e /var/lib/mysql/debian-*.flag ]; then
            rm /var/lib/mysql/debian-*.flag
        fi
        
        if [ $supported_code_name -eq 1 ]; then
            print "Installing the Percona database ..."

            if [ $(apt-key list| grep CD2EFD2A | wc -l) -lt 1 ]; then
                gpg --keyserver hkp://keys.gnupg.net \
                    --recv-keys 1C4CBDCDCD2EFD2A \
                    1>>$log 2>>$log
                gpg -a --export CD2EFD2A | apt-key add - \
                    1>>$log 2>>$log
            fi
            add_apt_source "deb http://repo.percona.com/apt ${code_name} main"
            packages="percona-server-server percona-server-client"
            install_packages_if_missing $packages
        else
            print -n "The Percona APT repsository "
            print "doesn't have packages for your Debian (or derivative) "
            print "version with code name $code_name. I will use vanilla "
            print "MySQL instead."

            packages="mysql-server mysql-client libmysql-java"
            install_packages_if_missing $packages
        fi
    fi

    assert_pre_prequesite mysql
    
    download_escenic_components
    set_up_engine_and_plugins
    set_up_ecedb
}

# $1 is the default instance name, the calee is responsible for
# setting this.
function ask_for_instance_name()
{
    if [ $fai_enabled -eq 0 ]; then
        print "What do you want to call this ECE instance?"
        print "Press ENTER to accept the default instance name, $1."
        echo -n "Your choice [$1]> "
        read instance_name
    else
        if [ $install_profile_number -eq $PROFILE_EDITORIAL_SERVER ]; then
            instance_name=$(get_conf_value fai_editor_name)
        elif [ $install_profile_number -eq $PROFILE_PRESENTATION_SERVER ]; then
            instance_name=$(get_conf_value fai_presentation_name)
        elif [ $install_profile_number -eq $PROFILE_SEARCH_SERVER ]; then
            instance_name=$(get_conf_value fai_search_name)
        fi
    fi

    if [ -z "$instance_name" ]; then
        instance_name=$1
    fi
    make_dir /etc/escenic/engine/instance/${instance_name}
}

# $1=<default instance name>
# $2=<editorial server=0 | presentation server=1>
function install_ece_instance()
{
    install_ece_third_party_packages
    
    ask_for_instance_name $1
    download_escenic_components
    check_for_required_downloads

    set_up_engine_and_plugins
    set_up_assembly_tool
    set_up_basic_nursery_configuration
    set_up_instance_specific_nursery_configuration
    
    set_up_app_server
    set_up_proper_logging_configuration

    # special treatment for presentation servers
    if [ $2 -eq $PROFILE_PRESENTATION_SERVER ]; then
        file=/etc/escenic/ece-${instance_name}.conf
        print "Creating instance specific conf: $file ..."
        cat >> $file <<EOF
deploy_webapp_white_list="escenic-admin ${publication_name}"
EOF
    fi
    
    set_correct_permissions
    assemble_deploy_and_restart_type

    admin_uri=http://$HOSTNAME:${appserver_port}/escenic-admin
    add_next_step "- New ECE instance $instance_name installed."
    add_next_step "- Its admin interface is available at $admin_uri"
    add_next_step "- You can view all installed plugin & engine versions with:"
    add_next_step "  ece -i $instance_name versions"
}

function install_presentation_server()
{
    print "Installing a presentation server on $HOSTNAME ..."

    install_ece_instance "web1" 1
}

function assemble_deploy_and_restart_type()
{
    print "Assembling, deploying & starting $instance_name ..."

    if [ -z "$type" ]; then
        type=engine
    fi
    
    # TODO clear strategy on when to add 'clean' to the command list
    # For now, we'll omit it to make the install script run as fast as
    # possible. It should in most cases work just fine, the exception
    # being if the script is to cater for ECE/plugin upgrades and
    # removal of existing publications.
    ece_command="ece -i $instance_name -t $type assemble deploy restart"
    su - $ece_user -c "$ece_command" 1>>$log 2>>$log
}

function ensure_that_instance_is_running()
{
    ece_command="ece -i $1 -t $type status"
    if [ $(su - $ece_user -c "$ece_command" | grep UP | wc -l) -lt 1 ]; then
        ece_command="ece -i $1 -t $type start"
        su - $ece_user -c "$ece_command" 1>>$log 2>>$log
        # TODO improve this by adding a timed while loop
        sleep 60
    fi
}

function create_publication()
{
    if [ ! -e /opt/escenic/engine -o \
        ! -e /opt/escenic/assemblytool ]; then
        print "Please install ECE and an assembly environment before"
        print "running this installation profile again."
        exit 1
    fi

    print "Getting ready to create a new publiation ..."
    create_publication_definition_and_war

    # TODO make educated guesses about the available instances on
    # $HOSTNAME by looking in /etc/escenic/ece-*.conf
    
    default_instance=dev1

    if [ $fai_enabled -eq 0 ]; then
        print "Which ECE instance do you wish to use to create it?"
        echo -n "Your choice [$default_instance]> "
        read instance_name
    else
        instance_name=$(get_conf_value fai_publication_use_instance)
    fi

    if [ -z "$instance_name" ]; then
        instance_name=$default_instance
    fi

    type=engine
    ensure_that_instance_is_running $instance_name
    # TODO set the appserver_port based on the instance_name chosen
    # above.
    create_publication_in_db $publication_war
    assemble_deploy_and_restart_type

    add_next_step "- a new publication $publication_name has been created"
}

function install_editorial_server()
{
    print "Installing an editorial server on $HOSTNAME ..."

    install_ece_instance "editor1" 0
    type=engine
    ece_command="ece -i $instance_name -t $type assemble deploy restart"
    su - $ece_user -c "$ece_command" 1>>$log 2>>$log
    create_publication
}

function install_rmi_hub()
{
    make_dir /etc/escenic/rmi-hub
    
    cp -r /opt/escenic/engine/contrib/rmi-hub/config/* \
        /etc/escenic/rmi-hub/

    hub_host=$HOSTNAME
    file=$common_nursery_dir
    file=$file/neo/io/managers/HubConnectionManager.properties

    make_dir $(basename $file)
    set_conf_file_value hub \
        "rmi://${hub_host}:1099/hub/Hub" \
        $file

    cat > common/io/api/EventManager.properties <<EOF
clientConfiguration=/neo/io/services/HubConnection
pingTime=10000
EOF

    add_next_step "- Restart all your instances to make the hub seem them:"
    for el in /etc/escenic/engine/instance/*; do
        instance_name=$(basename $el)
        add_next_step "   - $ ece -i ${instance_name} restart"
    done

    print "Starting the RMI-hub on $HOSTNAME ..."
    ece_command="ece -t rmi-hub restart"
    su - $ece_user -c "$ece_command" 1>>$log 2>>$log
}

# reads the value of the desired setting from $conf_file
#
# parameters: $1 : the conf key, see ece-install-guide.txt for an
# overview of the available keys.
function get_conf_value()
{
    if [ ! -e "$conf_file" ]; then
        print $conf_file "doesn't exist."
        exit 1
    fi

    if [ $(grep $1 $conf_file | grep -v ^# | wc -l) -gt 0 ]; then
        echo $(grep $1 $conf_file | grep -v ^# | cut -d'=' -f2)
    fi
}

# returns 0 for false, 1 for true
#
# paramaters: $1 : the conf key, see get_conf_value
function get_boolean_conf_value()
{
    value=$(get_conf_value $1)
    if [ -z "$value" ]; then
        echo 0
    elif [ "$value" = "" ]; then
        echo 0
    elif [ "$value" -eq 1 ]; then
        echo 1
    else
        echo 0
    fi
}

function install_widget_framework()
{
    # TODO java.lang.NoClassDefFoundError:
    # Lcom/escenic/framework/captcha/ReCaptchaConfig;
    
    wf_user=$(get_conf_value wf_user)
    wf_password=$(get_conf_value wf_password)

    if [ -z "$wf_user" -o -z "$wf_password" ]; then
        print "Be sure to set wf_user and wf_password in $conf_file"
        print "If you don't have these, please contact support@escenic.com"
        exit 1
    fi

    print "Creating a Maven settings file: $HOME/.m2/settings.xml ..."
    # TODO consider /<home|Users>/${ece_user} instead
    make_dir $HOME/.m2
    cat > $HOME/.m2/settings.xml <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/settings/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                              http://maven.apache.org/xsd/settings-1.0.0.xsd">
  <servers>
    <server>
      <id>escenic-repo</id>
      <username>${wf_user}</username>
      <password>${wf_password}</password>
    </server>
  </servers>

  <profiles>
    <profile>
      <id>escenic-profile</id>
      <repositories>
        <repository>
          <id>escenic-repo</id>
          <name>Repository for EWF libraries</name>
          <url>http://repo.escenic.com/</url>
          <layout>default</layout>
        </repository>
      </repositories>
    </profile>
  </profiles>

  <activeProfiles>
    <activeProfile>escenic-profile</activeProfile>
  </activeProfiles>
</settings>
EOF

    print "Downloading Widget Framework from technet.escenic.com ..."
    for el in $wf_download_list; do
        cd $download_dir
        wget --continue \
            --http-user $technet_user \
            --http-password $technet_password \
            $el \
            1>>$log 2>>$log
        
        cd /opt/escenic/
        unzip -u $download_dir/$(basename $el) \
            1>>$log 2>>$log
    done

    assert_pre_prequesite mvn
    wf_maven_dir=$(echo /opt/escenic/widget-framework-core-*/maven)
    cd $wf_maven_dir
    print "Installing Widget Framework into your local Maven repository ..."
    export JAVA_HOME=$java_home
    mvn install \
        1>>$log 2>>$log

    # installing the widget-framework-common as a ECE plugin
    wf_dist_dir=$(echo $wf_maven_dir/widget-framework-common/target/widget-framework-common-*-dist/widget-framework-common-*)
    cd /opt/escenic/assemblytool/plugins
    if [ ! -h $(basename $wf_dist_dir) ]; then
        ln -s $wf_dist_dir
    fi
    
    cp -r $wf_dist_dir/misc/siteconfig/* $common_nursery_dir/

    add_next_step "- Widget Framework has been installed into your local" 
    add_next_step "  Maven repository and its ECE components have been installed"
}

function install_search_instance()
{
    type=search1
    install_ece_instance "search1" 0
    
    file=/etc/escenic/ece-${instance_name}.conf
    print "Creating instance specific conf: $file ..."
    cat >> $file <<EOF
deploy_webapp_white_list="escenic-admin solr indexer-webapp"
EOF

    # TODO update instead of append
    dir=$common_nursery_dir/com/escenic/framework/search/solr
    make_dir dir
    echo "solrServerURI=http://${search_host}:${search_port}/solr" \
        >>  $dir/SolrSearchEngine.properties
    
    dir=$common_nursery_dir/com/escenic/webservice/search
    make_dir $dir
    echo "solrURI=http://${search_host}:${search_port}/solr/select" \
        >> $dir/DelegatingSearchEngine.properties

    dir=$common_nursery_dir/com/escenic/lucy
    echo "solrURI=http://${search_host}:${search_port}/solr" \
        >> $dir/LucySearchEngine.properties

    dir=$common_nursery_dir/com/escenic/forum/search/lucy
    echo "solrURI=http://${search_host}:${search_port}/solr" \
        >> $dir/SearchEngine.properties

    set_up_solr
    assemble_deploy_and_restart_type
}

# useful for development and test environments.
function install_all_in_one_environment()
{
    print "Installing an all-in-one environment on $HOSTNAME ..."

    install_database_server
    install_ece_instance "dev1" 0
    install_cache_server
    set_up_solr

    install_widget_framework
    create_publication
}

function common_post_install()
{
    print_status_and_next_steps
    rm $pid_file
}

for el in $@; do
    if [ $el = "-v" -o $el = "--verbose" ]; then
        debug=1
    fi
done

assert_correct_runtime_environment

fai_enabled=$(get_boolean_conf_value fai_enabled)

if [ $fai_enabled -eq 1 ]; then
    print "Full Automatic Install (FAI) enabled."
    print "All user input will be read from $conf_file"
    
    if [ $(get_boolean_conf_value fai_all_install) -eq 1 ]; then
        install_profile_number=$PROFILE_ALL_IN_ONE
        common_pre_install
        install_all_in_one_environment
        common_post_install
    elif [ $(get_boolean_conf_value fai_editor_install) -eq 1 ]; then
        install_profile_number=$PROFILE_EDITORIAL_SERVER
        common_pre_install
        install_editorial_server
        common_post_install
    elif [ $(get_boolean_conf_value fai_db_install) -eq 1 ]; then
        install_profile_number=$PROFILE_DB_SERVER
        common_pre_install
        install_database_server
        common_post_install
    elif [ $(get_boolean_conf_value fai_cache_install) -eq 1 ]; then
        install_profile_number=$PROFILE_CACHE_SERVER
        common_pre_install
        install_cache_server
        common_post_install
    elif [ $(get_boolean_conf_value fai_rmi_install) -eq 1 ]; then
        install_profile_number=$PROFILE_RMI_HUB
        common_pre_install
        install_rmi_hub
        common_post_install
    elif [ $(get_boolean_conf_value fai_wf_install) -eq 1 ]; then
        install_profile_number=$PROFILE_WIDGET_FRAMEWORK
        common_pre_install
        install_widget_framework
        common_post_install
    elif [ $(get_boolean_conf_value fai_presentation_install) -eq 1 ]; then
        install_profile_number=$PROFILE_PRESENTATION_SERVER
        common_pre_install
        install_presentation_server
        common_post_install
    elif [ $(get_boolean_conf_value fai_publication_create) -eq 1 ]; then
        install_profile_number=$PROFILE_CREATE_PUBLICATION
        common_pre_install
        create_publication
        common_post_install
    fi
else
    read_user_input
    common_pre_install
    case $install_profile_number in
        $PROFILE_ALL_IN_ONE)
        install_all_in_one_environment
        ;;
        $PROFILE_CACHE_SERVER)
        install_cache_server
        ;;
        $PROFILE_DB_SERVER)
        install_database_server
        ;;
        $PROFILE_EDITORIAL_SERVER)
        install_editorial_server
        ;;
        $PROFILE_PRESENTATION_SERVER)
        install_presentation_server
        ;;
        $PROFILE_SEARCH_SERVER)
        install_search_instance
        ;;
        $PROFILE_RMI_HUB)
        install_rmi_hub
        ;;
        $PROFILE_WIDGET_FRAMEWORK)
        install_widget_framework
        ;;
        $PROFILE_CREATE_PUBLICATION)
        create_publication
        ;;
        default)
            print "You must select 1-7"
            exit 1
            ;;
    esac
    common_post_install
fi


